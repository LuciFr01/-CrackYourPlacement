class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<vector<int>> ans;
        priority_queue<pair<double,vector<int>>,vector<pair<double,vector<int>>>,greater<pair<double,vector<int>>>> pq;
        for(auto it:points){
            double d=it[0]*it[0]+it[1]*it[1];d=sqrt(d);
            pq.push(make_pair(d,it));
        }
        while(!pq.empty() && k>0){
           ans.push_back(pq.top().second);pq.pop();k--;
        }
        return ans;
    }
};
