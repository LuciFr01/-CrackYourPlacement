class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prevptr = nullptr;
        ListNode* curptr = head;
        while (curptr != nullptr) {
            ListNode* nextptr = curptr->next;
            curptr->next = prevptr;
            prevptr = curptr;
            curptr = nextptr;
        }
        return prevptr;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        
        int carry = 0;
        ListNode* head = new ListNode();
        ListNode* l3 = head;

        while (l1 != nullptr || l2 != nullptr || carry > 0) {
            int val1 = (l1 != nullptr) ? l1->val : 0;
            int val2 = (l2 != nullptr) ? l2->val : 0;
            int sum = val1 + val2 + carry;
            carry = sum / 10;
            l3->next = new ListNode(sum % 10);
            l3 = l3->next;
            
            if (l1 != nullptr) l1 = l1->next;
            if (l2 != nullptr) l2 = l2->next;
        }

        ListNode* result = reverseList(head->next);
        delete head;
        return result;
    }
};
